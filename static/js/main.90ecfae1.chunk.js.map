{"version":3,"sources":["component/header.js","component/body.js","component/footer.js","App.js","serviceWorker.js","index.js"],"names":["header","Fragment","id","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","MapWithAMarker","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","position","body","state","loading","person","fetch","response","json","data","this","setState","results","src","alt","picture","large","name","first","last","dob","date","gender","phone","email","location","street","isMarkerShown","googleMapURL","loadingElement","style","height","containerElement","width","mapElement","Footer","icon","faLinkedin","size","faFacebook","faInstagram","faTwitter","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90ecfae1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class header extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      {/*generated code*/}\r\n      <header id=\"header\">\r\n        <div>\r\n          <hr className=\"hr\"></hr>\r\n          <nav className=\"navbar sticky-top navbar-expand-lg\">\r\n          <div className=\"rachel\">\r\n          <a className=\"navbar-brand nav-link disabled\" href=\"#\">Rachel Smith</a>\r\n          </div>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"nav navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">ABOUT</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">RESUME</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#nav-tabContent\">EDUCATION</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#nav-tabContent\">PORTOFOLIO</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        </div>\r\n      </header>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\r\n\r\nconst MapWithAMarker = withGoogleMap(props =>\r\n  <GoogleMap\r\n    defaultZoom={8}\r\n    defaultCenter={{ lat: -6.224853, lng: 106.803898 }}\r\n  >\r\n    <Marker\r\n      position={{ lat: -6.224853, lng: 106.803898 }}\r\n    />\r\n  </GoogleMap>\r\n);\r\n\r\nexport default class body extends Component {\r\n\r\n\tstate = \r\n\t{\r\n\t\tloading: true,\r\n\t\tperson: null\r\n\r\n\t};\r\n\r\n\tasync componentDidMount() \r\n\t{\r\n\t\tconst url =\"https://randomuser.me/api/\"\r\n\t\tconst response = await fetch(url);\r\n\t\tconst data = await response.json();\r\n\t\tthis.setState({person: data.results[0], loading: false });\r\n\t\t\r\n\t\t\t\r\n\t}\r\n  render() {\r\n  \tif (this.state.loading) {\r\n  \t\treturn <div className = \"loading\">loading . . .</div>;\r\n  \t}\r\n  \tif (!this.state.person) {\r\n  \t\treturn <div className = \"error\"> Error </div>;\r\n  \t}\r\n    return (\r\n      <React.Fragment>\r\n      {/*generated code*/}\r\n      <body id=\"body\">\r\n      \t<div className = \"bg\">\r\n      \t<img src=\"./Picture1.png\" className=\"img-fluid\" alt=\"Responsive image\" />\r\n      \t</ div>\r\n      \t<div className = \"person\">\r\n      \t<img src={this.state.person.picture.large} />\r\n      \t</ div>\r\n      \t<div className = \"text-block\">\r\n      \t<div className = \"name\"> {this.state.person.name.first} {this.state.person.name.last}</ div>\r\n      \t<div className = \"job\"> Developer</ div>\r\n        <br></ br>\r\n\r\n      \t<div className = \"dob\">Date of Birth : {this.state.person.dob.date}</ div>\r\n      \r\n      \t<div className = \"gender\">Gender &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t : {this.state.person.gender}</ div>\r\n      \t\r\n      \t<div className = \"phone\">Phone \t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  :  {this.state.person.phone}</ div>\r\n\r\n      \t<div className = \"email\">Email \t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t : {this.state.person.email}</ div>\r\n\r\n      \t<div className = \"address\">Address &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {this.state.person.location.street}</ div>\r\n        <div className = \"location\">location &nbsp;&nbsp;&nbsp;&nbsp; :  </ div>\r\n          <div className = \"maps\">\r\n            <MapWithAMarker\r\n              isMarkerShown\r\n              googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n              loadingElement={<div style={{ height: `100%` }} />}\r\n              containerElement={<div style={{ height: `100px`, width: `100px` }} />}\r\n              mapElement={<div style={{ height: `100%` }} />}\r\n            />\r\n          </div>\r\n      </div>\r\n      </body>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport SocialMediaIcons from 'react-social-media-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faFacebook,faTwitter,faInstagram,faLinkedin} from \"@fortawesome/free-brands-svg-icons\";\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      {/*generated code*/}\r\n      <footer id=\"footer\">\r\n      \t<div className=\"footer\">\r\n      \t\t <a href=\"#\" className=\"fa fa-linkedin\"><FontAwesomeIcon icon={faLinkedin} size=\"2x\" /></a>\r\n      \t\t <a href=\"#\" className=\"fa fa-facebook\"><FontAwesomeIcon icon={faFacebook} size=\"2x\" /></a>\r\n      \t\t <a href=\"#\" className=\"fa fa-instagram\"><FontAwesomeIcon icon={faInstagram} size=\"2x\" /></a>\r\n      \t\t <a href=\"#\" className=\"fa fa-twitter\"><FontAwesomeIcon icon={faTwitter} size=\"2x\" /></a>\r\n      \t\t \r\n      \t</ div>\r\n      </footer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport Header from './component/header';\nimport Body from './component/body';\nimport Footer from './component/footer';\nimport styles from \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}